// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户
model User {
  id         String   @id @default(uuid())
  name       String   @unique @db.VarChar(12)
  password   String   @db.Char(32)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
  isDelete   Boolean  @default(false)

  @@index([id, name, isDelete])
}

// 系统配置
model Config {
  id    String @id @default(uuid())
  key   String @unique @db.VarChar(30)
  value Json
}

// 文件
model Attachment {
  id         String   @id @default(uuid())
  name       String   @db.VarChar(100)
  url        String   @unique @db.VarChar(100)
  hash       String   @unique @db.Char(32)
  createTime DateTime @default(now())
  isDelete   Boolean  @default(false)

  @@index([hash])
}

// 菜单
model Menu {
  id         String   @id @default(uuid())
  parentId   String?  @db.Char(36)
  name       String   @db.VarChar(60)
  sort       Int
  status     Boolean  @default(true)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
  isDelete   Boolean  @default(false)
  siders     Sider[]
  layers     Layer[]

  @@index([isDelete])
}

// 物料
model Material {
  id        String       @id @default(uuid())
  type      MaterialType
  props     Json
  isTitle   Boolean
  siderId   String?      @db.Char(36)
  sider     Sider?       @relation(fields: [siderId], references: [id], onDelete: Cascade)
  overlayId String?      @db.Char(36)
  overlay   Overlay?     @relation(fields: [overlayId], references: [id], onDelete: Cascade)
  sort      Int
  isDelete  Boolean      @default(false)

  @@index([isTitle, siderId, overlayId])
}

enum MaterialType {
  BarChart
  Carousel
  Collapse
  DataCard
  Description
  FileList
  LineChart
  PieChart
  Progress
  SubTitle
  Table
  Timeline
  Title
}

// 侧边栏
model Sider {
  id         String       @id @default(uuid())
  menuId     String       @db.Char(36)
  menu       Menu         @relation(fields: [menuId], references: [id], onDelete: Cascade)
  position   SiderPositon
  sort       Int
  status     Boolean      @default(true)
  createTime DateTime     @default(now())
  updateTime DateTime     @updatedAt
  isDelete   Boolean      @default(false)
  materials  Material[]

  @@index([position, menuId, sort, isDelete])
}

enum SiderPositon {
  left
  right
}

// 图层
model Layer {
  id         String    @id @default(uuid())
  menuId     String    @db.Char(36)
  menu       Menu      @relation(fields: [menuId], references: [id], onDelete: Cascade)
  asLegend   Boolean   @default(false)
  name       String    @db.VarChar(60)
  legendImg  String    @db.VarChar(120)
  sort       Int
  status     Boolean   @default(true)
  createTime DateTime  @default(now())
  updateTime DateTime  @updatedAt
  isDelete   Boolean   @default(false)
  overlays   Overlay[]

  @@index([menuId, sort, isDelete])
}

// 覆盖物
model Overlay {
  id          String      @id @default(uuid())
  layerId     String      @db.Char(36)
  layer       Layer       @relation(fields: [layerId], references: [id], onDelete: Cascade)
  type        OverlayType
  name        String      @db.VarChar(60)
  props       Json
  detailTitle String      @db.VarChar(60)
  detailWidth String      @db.VarChar(20)
  status      Boolean     @default(true)
  createTime  DateTime    @default(now())
  updateTime  DateTime    @updatedAt
  isDelete    Boolean     @default(false)
  materials   Material[]

  @@index([layerId, isDelete])
}

enum OverlayType {
  Marker
  Polyline
  BezierCurve
  Polygon
  Rectangle
  Circle
  Ellipse
  Text
  LabelMarker
  ElasticMarker
  ImageLayer
}
